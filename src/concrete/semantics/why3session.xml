<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.6.0" timelimit="20" steplimit="0" memlimit="1000"/>
<prover id="3" name="Eprover" version="2.2" timelimit="30" steplimit="0" memlimit="1000"/>
<file name="../semantics.mlw">
<theory name="Env" proved="true">
 <goal name="VC mixfix [&lt;-]" expl="VC for mixfix [&lt;-]" proved="true">
 <proof prover="1"><result status="valid" time="0.02"/></proof>
 </goal>
</theory>
<theory name="Buffers" proved="true">
 <goal name="Stdout.VC to_string" expl="VC for to_string" proved="true">
 <proof prover="1"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="Stdout.VC concat" expl="VC for concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Stdout.VC concat_empty_left" expl="VC for concat_empty_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_empty_left.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC concat_empty_left.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_empty_left.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC concat_empty_left.1.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Stdout.VC concat_empty_right" expl="VC for concat_empty_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_empty_right.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC concat_empty_right.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_empty_right.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC concat_empty_right.1.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Stdout.VC concat_aux" expl="VC for concat_aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_aux.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC concat_aux.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_aux.1.0" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC concat_aux.1.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.02"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Stdout.VC concat_assoc" expl="VC for concat_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_assoc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC concat_assoc.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC concat_assoc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_assoc.2.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC concat_assoc.2.1" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Context" proved="true">
 <goal name="VC mk_state" expl="VC for mk_state" proved="true">
 <proof prover="1"><result status="valid" time="0.03"/></proof>
 </goal>
</theory>
<theory name="Semantics">
 <goal name="VC nth_argument" expl="VC for nth_argument" proved="true">
 <proof prover="1"><result status="valid" time="0.06"/></proof>
 </goal>
 <goal name="VC shift_arguments" expl="VC for shift_arguments" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC shift_arguments.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shift_arguments.0.0" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shift_arguments.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC shift_arguments.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shift_arguments.2.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC shift_arguments.2.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.01" steps="11"/></proof>
    </goal>
    <goal name="VC shift_arguments.2.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.05"/></proof>
    </goal>
    <goal name="VC shift_arguments.2.0.2" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.07"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC shift_arguments.2.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC shift_arguments.2.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.04"/></proof>
    </goal>
    <goal name="VC shift_arguments.2.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.08"/></proof>
    </goal>
    <goal name="VC shift_arguments.2.1.2" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.06"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="shift_arguments_0" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="8"/></proof>
 </goal>
 <goal name="shift_arguments_cons_some" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="shift_arguments_cons_some.0" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="170"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="shift_arguments_cons_none" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="shift_arguments_cons_none.0" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="97"/></proof>
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_instruction_functional">
 </goal>
 <goal name="cons_append" proved="true">
 <proof prover="1"><result status="valid" time="0.09"/></proof>
 </goal>
 <goal name="append_empty_left" proved="true">
 <proof prover="1"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="append_empty_right" proved="true">
 <proof prover="1"><result status="valid" time="0.09"/></proof>
 </goal>
 <goal name="VC eval_foreach_concat" expl="VC for eval_foreach_concat">
 <transf name="induction_ty_lex" >
  <goal name="VC eval_foreach_concat.0" expl="VC for eval_foreach_concat">
  <transf name="split_vc" >
   <goal name="VC eval_foreach_concat.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.16"/></proof>
   </goal>
   <goal name="VC eval_foreach_concat.0.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC eval_foreach_concat.0.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.12"/></proof>
    </goal>
    <goal name="VC eval_foreach_concat.0.1.1" expl="postcondition">
    <proof prover="0" timelimit="20" memlimit="2500"><undone/></proof>
    <proof prover="1" timelimit="20" memlimit="2500"><undone/></proof>
    <proof prover="2" memlimit="2500"><undone/></proof>
    <proof prover="3"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="eval_foreach_last">
 <transf name="split_vc" >
  <goal name="eval_foreach_last.0">
  <transf name="destruct_alg_subst" arg1="bhv2">
   <goal name="eval_foreach_last.0.0">
   <proof prover="1" obsolete="true"><result status="valid" time="16.68"/></proof>
   </goal>
   <goal name="eval_foreach_last.0.1">
   <proof prover="0" timelimit="20" memlimit="2500" obsolete="true"><result status="timeout" time="20.00"/></proof>
   <proof prover="1" timelimit="20" memlimit="2500" obsolete="true"><result status="valid" time="4.95"/></proof>
   <proof prover="2" memlimit="2500" obsolete="true"><result status="timeout" time="20.00"/></proof>
   </goal>
   <goal name="eval_foreach_last.0.2">
   <proof prover="0" timelimit="20" memlimit="2500" obsolete="true"><result status="timeout" time="20.00"/></proof>
   <proof prover="1" timelimit="20" memlimit="2500" obsolete="true"><result status="valid" time="4.90"/></proof>
   <proof prover="2" memlimit="2500" obsolete="true"><result status="timeout" time="20.00"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="eval_str_expr_keeps_stdout">
 <transf name="induction_pr" >
  <goal name="eval_str_expr_keeps_stdout.0">
  <proof prover="1" obsolete="true"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="eval_str_expr_keeps_stdout.1">
  <proof prover="1" obsolete="true"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="eval_str_expr_keeps_stdout.2">
  <proof prover="1" obsolete="true"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="eval_str_expr_keeps_stdout.3">
  <proof prover="1" obsolete="true"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="eval_str_expr_keeps_stdout.4">
  <proof prover="1" obsolete="true"><result status="valid" time="0.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_str_expr_extends_stdout">
 <transf name="induction_pr" >
  <goal name="eval_str_expr_extends_stdout.0">
  <proof prover="1" obsolete="true"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="eval_str_expr_extends_stdout.1">
  <proof prover="1" obsolete="true"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="eval_str_expr_extends_stdout.2">
  <proof prover="1" obsolete="true"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="eval_str_expr_extends_stdout.3">
  <proof prover="1" obsolete="true"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="eval_str_expr_extends_stdout.4">
  <proof prover="1" obsolete="true"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_list_expr_keeps_stdout">
 <transf name="induction_pr" >
  <goal name="eval_list_expr_keeps_stdout.0">
  <proof prover="1" obsolete="true"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="eval_list_expr_keeps_stdout.1">
  <proof prover="1" obsolete="true"><result status="valid" time="0.13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_list_expr_expands_stdout">
 <transf name="induction_pr" >
  <goal name="eval_list_expr_expands_stdout.0">
  <proof prover="1" obsolete="true"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="eval_list_expr_expands_stdout.1">
  <proof prover="1" obsolete="true"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_foreach_expands_stdout">
 </goal>
 <goal name="eval_call_utility_expands_stdout">
 </goal>
 <goal name="eval_sequence_expands_stdout">
 </goal>
 <goal name="eval_instruction_extends_stdout">
 </goal>
</theory>
</file>
</why3session>
