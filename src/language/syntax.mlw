
module Variable

  type variable

end

module Syntax

  use mystring.String
  use list.List

  use Variable

  type split = bool
  
  type expression =
    | ELiteral string
    | EVariable variable
    | EArg int | EArgs | EPrevious (* @NJ TODO `$<n>`, `$@`, `$?` better explicit than as
      normal variable? Can be differentiated while parsing, right? *)
    | ESubshell statement
    | EConcat expression expression

  (* TODO Or concat as flat list of expressions in a separate type instead? Like this

     type component = Literal _ | Variable _ | Arg | Args | Previous | Subshell _
     type expression = Concat (list component)

     Only possible without quotes within expression.
  *)

  with expressions =
    list (expression, split)

  with return_code =
    | CSuccess
    | CFailure
    | CPrevious

  (* TODO add utilities `true`, `false` to UNIX specification *)
  with statement =
    | SAssignment variable expression
    | SSequence statement statement
    | SSubshell statement
    | SIf statement statement statement
    | SNot statement
    | SPipe statement statement
    | SWhile statement statement
    | SNoOutput statement
    | SForeach variable expressions statement
    | SCall string expressions
    | SExit return_code
      (* CM: but `exit $ret` not representable? `SExit expression`instead with `$?` as
         expression? *)
end