
module Syntax

  use mystring.String
  use list.List

  type variable
  type split = bool
  
  (* TODO Add `Arg int` (`$n`) and `EArgs` (`$@`) here or test variables matching `[0-9@]`
     in `eval_variable` - they should not be searched in the environment *)
  type expression =
    | ELiteral string
    | EVariable variable
    | ESubshell statement
    | EConcat expression expression

  with expressions =
    list (expression, split)

  with return_code =
    | CSuccess
    | CFailure
    | CPrevious

  (* TODO add utilities `true`, `false` to UNIX specification *)
  with statement =
    | SAssignment variable expression
    | SSequence statement statement
    | SSubshell statement
    | SIf statement statement statement
    | SPipe statement statement
    | SWhile statement statement
    | SNoOutput statement
    | SForeach variable expressions statement
    | SNot statement
    | SCall string expressions
    | SExit return_code
end