
module Variable
  type variable
end

module Syntax

  use mystring.String
  use list.List

  use export Variable

  type split = Split | NoSplit
  
  type expression =
    | ELiteral string
    | EVariable variable
    | ESubshell statement
    | EConcat expression expression

  (* TODO `$<n>`, `$@`, `$?` better explicit (`EArg int | EArgs | EPrevious`) than
     as normal variable? Can be differentiated while parsing, right? `$?` is boolean,
     however. How to separate? *)

  (* TODO Or concat as flat list of expressions in a separate type instead? Like this

     type scomp = Literal string | Variable var | Subshell stmt (* evaluates to string *)
     type sexpr = Concat (list component) (* evaluates to string *)
     type sexprs = list (sexpr, split) (* evaluates to string list *)

     This would result in a more canonical representation.
  *)

  with expressions =
    list (expression, split)

  with return_code =
    | CSuccess
    | CFailure
    | CPrevious

  (** TODO add utilities `true`, `false` to *Specification of UNIX commands*  *)
  with statement =
    | SAssignment variable expression
    | SSequence statement statement
    | SSubshell statement
    | SIf statement statement statement
    | SNot statement
    | SPipe statement statement
    | SWhile statement statement
    | SNoOutput statement
    | SForeach variable expressions statement
    | SCall string expressions
    | SExit return_code
    (** CM: TODO `exit $ret` not representable? Add `CVar var` to `return_code`? `SExit
        sexpr` instead with `$?` as expression? Stuck when sexpr not numerical/boolean? *)
end